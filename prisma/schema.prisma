// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique(map: "product_slug_key")
  description String
  price       Decimal  @default(0) @db.Decimal(12, 2)
  images      String[]
  category    String
  brand       String
  stock       Int
  rating      Decimal  @default(0) @db.Decimal(3, 2)
  numReviews  Int      @default(0)
  isFeatured  Boolean  @default(false)
  banner      String?
  createdAt   DateTime @default(now()) @db.Timestamp(6)
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?   @default("NO_NAME")
  email         String?   @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?

  password      String?
  role          String?   @default("user")
  address       Json?     @db.Json
  paymentMethod String?   
  account       Account[]
  session       Session[]
  
  @@map("users")
}


model Account {
  id                 String  @id @default(uuid()) @db.Uuid
  userId             String  @db.Uuid
  type               String
  provider           String
  providerAccountId  String  
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}


model Session {
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}


model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}